package sbnz.integracija;

import sbz.cardiagnosticbe.model.drools.CurrentDetectedFailure;
import sbz.cardiagnosticbe.model.db.User;
import sbz.cardiagnosticbe.model.db.DetectedFailure;

import java.time.LocalDateTime;
import java.util.List;


rule "Check failure history - not all steps applied"
    salience 1
    agenda-group "failure-history"
    when
        $currDf: CurrentDetectedFailure(
            $currDetectedFailureId: failure.id,
            $maxStepsCnt: nextRepairStep,
            $vehicleModelId: vehicleModelId,
            $vehicleProductionYear: vehicleProductionYear
        )
        eval($maxStepsCnt != 0)
        $u: User($detectedFailures: detectedFailures)
        Number($appliedSteps: intValue > 0) from accumulate(
            DetectedFailure(
                $df: this,
                $df.failure.(
                    id == $currDetectedFailureId
                ),
                $df.vehicleModel.(
                    id == $vehicleModelId
                ),
                $df.vehicleProductionYear == vehicleProductionYear,
                $df.timestamp.isAfter(LocalDateTime.now().minusMonths(1))
            ) from $detectedFailures,
            count($df)
        )
        eval(($appliedSteps % $maxStepsCnt) != 0)
    then
        System.out.println("Not all steps applied for failure");
        $currDf.setNextRepairStep($appliedSteps % $maxStepsCnt);
end



rule "Check failure history - all steps already applied"
    salience 2
    agenda-group "failure-history"
    when
        $currDf: CurrentDetectedFailure(
            $currDetectedFailureId: failure.id,
            $maxStepsCnt: nextRepairStep,
            $vehicleModelId: vehicleModelId,
            $vehicleProductionYear: vehicleProductionYear
        )
        $u: User($detectedFailures: detectedFailures)
        Number($appliedSteps: intValue > 0) from accumulate(
            DetectedFailure(
                $df: this,
                $df.failure.(
                    id == $currDetectedFailureId
                ),
                $df.vehicleModel.(
                    id == $vehicleModelId
                ),
                $df.vehicleProductionYear == vehicleProductionYear,
                $df.timestamp.isAfter(LocalDateTime.now().minusMonths(1))
            ) from $detectedFailures,
            count($df)
        )
        eval(($appliedSteps % $maxStepsCnt) == 0)
    then
        System.out.println("All steps applied for failure");
        $currDf.setNextRepairStep(0);
end


rule "Check failure history - first time appearing"
    salience 3
    agenda-group "failure-history"
    when
        $currDf: CurrentDetectedFailure(
            $currDetectedFailureId: failure.id,
            $vehicleModelId: vehicleModelId,
            $vehicleProductionYear: vehicleProductionYear
        )
        $u: User(
            $detectedFailures: detectedFailures
        )
        Number(intValue == 0) from accumulate(
            DetectedFailure(
                $df: this,
                $df.failure.(
                    id == $currDetectedFailureId
                ),
                $df.vehicleModel.(
                    id == $vehicleModelId
                ),
                $df.vehicleProductionYear == vehicleProductionYear,
                $df.timestamp.isAfter(LocalDateTime.now().minusMonths(1))
            ) from $detectedFailures,
            count($df)
        )
    then
        System.out.println("Failure is appearing for the first time");
        $currDf.setNextRepairStep(0);
end